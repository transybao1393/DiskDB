{
  "timestamp": "2024-12-09",
  "system": {
    "platform": "macOS",
    "architecture": "arm64",
    "rust_version": "stable"
  },
  "baseline_metrics": {
    "protocol_parsing": {
      "get_simple": {
        "ops_per_sec": 1612784,
        "time_ms": 0.001,
        "allocations_per_op": 3
      },
      "set_simple": {
        "ops_per_sec": 1027833,
        "time_ms": 0.001,
        "allocations_per_op": 4
      },
      "zadd_complex": {
        "ops_per_sec": 357961,
        "time_ms": 0.003,
        "allocations_per_op": 12
      },
      "set_1kb": {
        "ops_per_sec": 38370,
        "time_ms": 0.026,
        "allocations_per_op": 4
      }
    },
    "storage_operations": {
      "set": {
        "ops_per_sec": 129630,
        "time_ms": 0.007
      },
      "get": {
        "ops_per_sec": 490677,
        "time_ms": 0.002
      }
    },
    "data_structure_complexity": {
      "lpush": "O(n)",
      "rpush": "O(1)",
      "lrange": "O(k)",
      "zrange_current": "O(n log n) - sorts on every query",
      "sismember": "O(1)"
    },
    "memory_patterns": {
      "allocations_per_request": "3-15",
      "cloning_overhead": "100% - all data cloned",
      "serialization_overhead": "2x for JSON values"
    }
  },
  "bottlenecks": [
    {
      "component": "Protocol Parser",
      "impact": "50-70% of simple request time",
      "cause": "Multiple string allocations"
    },
    {
      "component": "List Operations",
      "impact": "O(n) complexity for LPUSH",
      "cause": "Vec::insert(0) implementation"
    },
    {
      "component": "Memory Allocation",
      "impact": "3-15 allocations per request",
      "cause": "No pooling or arena allocation"
    },
    {
      "component": "Serialization",
      "impact": "2x overhead for JSON",
      "cause": "Double serialization path"
    }
  ],
  "optimization_targets": {
    "protocol_parsing": {
      "current": 1000000,
      "target_conservative": 3000000,
      "target_optimistic": 5000000,
      "improvement": "3-5x"
    },
    "memory_usage": {
      "current_percent": 100,
      "target_percent": 40,
      "reduction": "60%"
    },
    "overall_throughput": {
      "current": 1.0,
      "target_conservative": 2.5,
      "target_optimistic": 4.0,
      "improvement": "2.5-4x"
    }
  }
}