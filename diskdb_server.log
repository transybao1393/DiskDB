warning: method `execute` is never used
  --> src/commands/mod.rs:13:14
   |
12 | pub trait Command: Send + Sync {
   |           ------- method in this trait
13 |     async fn execute(&self, storage: Arc<dyn Storage>) -> Result<Response>;
   |              ^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: associated function `new` is never used
  --> src/commands/get.rs:14:12
   |
13 | impl GetCommand {
   | --------------- associated function in this implementation
14 |     pub fn new(key: String) -> Self {
   |            ^^^

warning: associated function `new` is never used
  --> src/commands/set.rs:15:12
   |
14 | impl SetCommand {
   | --------------- associated function in this implementation
15 |     pub fn new(key: String, value: String) -> Self {
   |            ^^^

warning: field `thread_pool_size` is never read
  --> src/config.rs:11:9
   |
4  | pub struct Config {
   |            ------ field in this struct
...
11 |     pub thread_pool_size: usize,
   |         ^^^^^^^^^^^^^^^^
   |
   = note: `Config` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: associated function `new` is never used
  --> src/config.rs:15:12
   |
14 | impl Config {
   | ----------- associated function in this implementation
15 |     pub fn new() -> Self {
   |            ^^^

warning: methods `as_string` and `as_string_mut` are never used
   --> src/data_types.rs:104:12
    |
103 | impl DataType {
    | ------------- methods in this implementation
104 |     pub fn as_string(&self) -> Option<&String> {
    |            ^^^^^^^^^
...
111 |     pub fn as_string_mut(&mut self) -> Option<&mut String> {
    |            ^^^^^^^^^^^^^

warning: method `as_list_mut` is never used
   --> src/data_types.rs:140:12
    |
132 | impl DataType {
    | ------------- method in this implementation
...
140 |     pub fn as_list_mut(&mut self) -> Option<&mut Vec<String>> {
    |            ^^^^^^^^^^^

warning: method `as_set_mut` is never used
   --> src/data_types.rs:212:12
    |
204 | impl DataType {
    | ------------- method in this implementation
...
212 |     pub fn as_set_mut(&mut self) -> Option<&mut HashSet<String>> {
    |            ^^^^^^^^^^

warning: method `as_hash_mut` is never used
   --> src/data_types.rs:266:12
    |
258 | impl DataType {
    | ------------- method in this implementation
...
266 |     pub fn as_hash_mut(&mut self) -> Option<&mut HashMap<String, String>> {
    |            ^^^^^^^^^^^

warning: method `as_sorted_set_mut` is never used
   --> src/data_types.rs:316:12
    |
308 | impl DataType {
    | ------------- method in this implementation
...
316 |     pub fn as_sorted_set_mut(&mut self) -> Option<&mut BTreeMap<String, f64>> {
    |            ^^^^^^^^^^^^^^^^^

warning: methods `as_json` and `as_json_mut` are never used
   --> src/data_types.rs:390:12
    |
389 | impl DataType {
    | ------------- methods in this implementation
390 |     pub fn as_json(&self) -> Option<&serde_json::Value> {
    |            ^^^^^^^
...
397 |     pub fn as_json_mut(&mut self) -> Option<&mut serde_json::Value> {
    |            ^^^^^^^^^^^

warning: methods `as_stream` and `as_stream_mut` are never used
   --> src/data_types.rs:436:12
    |
435 | impl DataType {
    | ------------- methods in this implementation
436 |     pub fn as_stream(&self) -> Option<&Vec<StreamEntry>> {
    |            ^^^^^^^^^
...
443 |     pub fn as_stream_mut(&mut self) -> Option<&mut Vec<StreamEntry>> {
    |            ^^^^^^^^^^^^^

warning: type alias `CacheMap` is never used
  --> src/db.rs:12:6
   |
12 | type CacheMap = HashMap<String, (String, Option<Instant>)>;
   |      ^^^^^^^^

warning: struct `DiskDB` is never constructed
  --> src/db.rs:19:12
   |
19 | pub struct DiskDB {
   |            ^^^^^^
   |
   = note: `DiskDB` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: associated items `new`, `flush_memtable`, `set`, and `get` are never used
  --> src/db.rs:27:12
   |
25 | impl DiskDB {
   | ----------- associated items in this implementation
26 |     /// Creates a new instance of the database, initializing RocksDB with optimizations.
27 |     pub fn new(path: &str) -> Self {
   |            ^^^
...
57 |     pub async fn flush_memtable(&self) {
   |                  ^^^^^^^^^^^^^^
...
76 |     pub async fn set(&self, key: &str, value: &str, expire: Option<u64>) {
   |                  ^^^
...
85 |     pub async fn get(&self, key: &str) -> Option<String> {
   |                  ^^^

warning: variant `ConnectionClosed` is never constructed
  --> src/error.rs:12:5
   |
5  | pub enum DiskDBError {
   |          ----------- variant in this enum
...
12 |     ConnectionClosed,
   |     ^^^^^^^^^^^^^^^^
   |
   = note: `DiskDBError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: variant `DecrBy` is never constructed
  --> src/protocol.rs:13:5
   |
6  | pub enum Request {
   |          ------- variant in this enum
...
13 |     DecrBy { key: String, delta: i64 },
   |     ^^^^^^
   |
   = note: `Request` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: method `get_string` is never used
  --> src/storage/mod.rs:21:14
   |
8  | pub trait Storage: Send + Sync {
   |           ------- method in this trait
...
21 |     async fn get_string(&self, key: &str) -> Result<Option<String>> {
   |              ^^^^^^^^^^

warning: `diskdb` (bin "diskdb") generated 18 warnings
    Finished `release` profile [optimized] target(s) in 0.22s
     Running `target/release/diskdb`
Error: Database("IO error: While lock file: diskdb/LOCK: Resource temporarily unavailable")
